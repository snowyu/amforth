# Logic.

# -----------------------------------------------------------------------------
  CODEWORD Flag_visible, "and", AND # ( x1 x2 -- x1&x2 )
                        # Combines the top two stack elements using bitwise AND.
# -----------------------------------------------------------------------------
  lw x5, 0(x4)
  addi x4, x4, 4
  and x3, x5, x3
  NEXT

# -----------------------------------------------------------------------------
  CODEWORD Flag_visible, "or", OR # ( x1 x2 -- x1|x2 )
                       # Combines the top two stack elements using bitwise OR.
# -----------------------------------------------------------------------------
  lw x5, 0(x4)
  addi x4, x4, 4
  or x3, x5, x3
  NEXT

# -----------------------------------------------------------------------------
  CODEWORD Flag_visible, "xor", XOR # ( x1 x2 -- x1|x2 )
                        # Combines the top two stack elements using bitwise exclusive-OR.
# -----------------------------------------------------------------------------
  lw x5, 0(x4)
  addi x4, x4, 4
  xor x3, x5, x3
  NEXT

# -----------------------------------------------------------------------------
  CODEWORD Flag_visible, "not", NOT # ( x -- ~x )
# -----------------------------------------------------------------------------
  xori x3, x3, -1
  NEXT

# -----------------------------------------------------------------------------
  CODEWORD Flag_visible, "invert", INVERT # ( x -- ~x )
# -----------------------------------------------------------------------------
  xori x3, x3, -1
  NEXT

# -----------------------------------------------------------------------------
  CODEWORD Flag_visible, "rshift", RSHIFT # ( x n -- x )
# -----------------------------------------------------------------------------
  lw x5, 0(x4)
  addi x4, x4, 4
  srl x3, x5, x3
  NEXT

  CODEWORD Flag_visible, "lshift", LSHIFT # ( x n -- x )
  lw x5, 0(x4)
  addi x4, x4, 4
  sll x3, x5, x3
  NEXT